{"version":3,"sources":["actions/index.js","styles/index.js","components/Forms.js","app/App.js","serviceWorker.js","reducers/index.js","store/configure.js","index.js"],"names":["addTheJokes","joke","type","GlobalStyle","createGlobalStyle","_templateObject","Margin","styled","div","_templateObject2","Paper","form","_templateObject3","Title","input","_templateObject4","Text","_templateObject5","Button","button","_templateObject6","Caution","p","_templateObject7","props","Form","react_default","a","createElement","onSubmit","e","useFetch","htmlFor","required","id","name","maxLength","App","addTheJoke","preventDefault","_this","onFetchClick","target","firstname","value","lastname","this","Fragment","Forms_Form","Component","connect","state","dispatch","firstName","lastName","_ref","arguments","length","undefined","_ref$firstName","_ref$lastName","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","_ref3","wrap","_context","prev","next","axios","get","concat","sent","data","stop","_x","apply","fetchTheJokes","Boolean","window","location","hostname","match","reducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","jokeReducer","applyMiddleware","thunk","ReactDOM","render","es","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b84e53db.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst addTheJokes = joke => ({ type: 'FETCH', joke })\nexport const fetchTheJokes = ({\n  firstName = 'Hired',\n  lastName = 'Me'\n} = {}) => {\n  return async dispatch => {\n    const {\n      data: {\n        value: { joke }\n      }\n    } = await axios.get(\n      `http://api.icndb.com/jokes/random?firstName=${firstName}&lastName=${lastName}`\n    )\n    dispatch(addTheJokes(joke))\n  }\n}\n","import styled, {createGlobalStyle} from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n\t* {\n\toutline:none;\n\tborder:none;\n\t}\n\tbody {\n\tbackground:#333 url(https://static.tumblr.com/maopbtg/a5emgtoju/inflicted.png) repeat; \n  margin: 0;\n  padding: 0;\n  font-family: Courier, monospace;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 90vh;\n\ttransition: background-color 2s ease-out;\n}\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n`\n\nexport const Margin = styled.div`\n  margin-left: 12px;\n  margin-bottom: 20px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -o-user-select: none;\n  user-select: none;\n`\n\nexport const Paper = styled.form`\n  color: #fff;\n  font-size: 20px;\n  display: flex;\n`\n\nexport const Title = styled.input`\n  background-color: transparent;\n  border-bottom: 3px solid #fff;\n  color: #fff;\n  font-size: 20px;\n  font-family: Courier, monospace;\n  width: 20vw;\n  height: 5vh;\n  font-weight: bold;\n`\nexport const Text = styled.div`\n  width: 45vw;\n  height: 45vh;\n  overflow: hidden;\n  background-color: #fff;\n  color: #222;\n  font-family: Courier, monospace;\n  font-weight: normal;\n  font-size: 24px;\n  resize: none;\n  line-height: 40px;\n  padding: 45px 100px 34px;\n  background-image: url(https://static.tumblr.com/maopbtg/E9Bmgtoht/lines.png),\n    url(https://static.tumblr.com/maopbtg/nBUmgtogx/paper.png);\n  background-repeat: repeat-y, repeat;\n  -webkit-border-radius: 12px;\n  border-radius: 12px;\n  -webkit-box-shadow: 0 2px 14px #000;\n  box-shadow: 0 2px 14px #000;\n  border-top: 1px solid #fff;\n  border-bottom: 1px solid #fff;\n  word-wrap: break-word;\n`\n\nexport const Button = styled.button`\n  visibility: hidden;\n`\n\nexport const Caution = styled.p`\n  color: white;\n  visibility: ${props => (props.joke ? 'visible' : 'hidden')};\n`\n","import React from 'react'\nimport {Button, Margin, Paper, Title} from '../styles'\n\nexport const Form = props => (\n  <Paper onSubmit={e => props.useFetch(e)}>\n    <Margin>\n      <label htmlFor=\"firstname\">Firstname: </label>\n      <Title\n        type=\"text\"\n        required\n        id=\"firstname\"\n        name=\"firstname\"\n        maxLength=\"30\"\n      />\n    </Margin>\n    <label htmlFor=\"lastname\">Lastname: </label>\n    <Title type=\"text\" required id=\"lastname\" name=\"lastname\" maxLength=\"30\" />\n    <Button type=\"submit\">Fetch</Button>\n  </Paper>\n)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {fetchTheJokes} from '../actions'\nimport {Form} from '../components/Forms'\nimport {Caution, GlobalStyle, Text} from '../styles'\n\nclass App extends Component {\n  addTheJoke = e => {\n    e.preventDefault()\n    this.props.onFetchClick(e.target.firstname.value, e.target.lastname.value)\n    e.target.firstname.value = ''\n    e.target.lastname.value = ''\n  }\n  render() {\n    const { joke } = this.props\n    return (\n      <>\n        <GlobalStyle />\n        <Form useFetch={this.addTheJoke} />\n        <Text>\n          {joke ? joke : 'Pleases enter to get some joke from Chuck Norris.'}\n        </Text>\n        <Caution joke={joke}>\n          *A button is disappear, don't worry just press the ENTER\n        </Caution>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return { joke: state.joke }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchClick: (firstName, lastName) => {\n      dispatch(fetchTheJokes({ firstName, lastName }))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","export default (state = '', action) => {\n  switch (action.type) {\n    case 'FETCH':\n      return action.joke\n    default:\n      return state\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport jokeReducer from '../reducers/index'\n\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose\n\nexport default () =>\n  createStore(\n    combineReducers({ joke: jokeReducer }),\n    composeEnhancers(applyMiddleware(thunk))\n  )\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './app/App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './store/configure'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}